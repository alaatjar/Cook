<!DOCTYPE html>
<html lang="en" class="allpag">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Games</title>
  <link rel="stylesheet" href="script.js" />
  <link rel="stylesheet" href="styles.css" />
  <script defer src="script.js"></script>
</head>

<body id="body-page">
  <%- include('./partials/header'); %>


    <div id="app">
      <h1>Current Time</h1>
      <div id="current-time"></div>
      <div class="create-alarm">
        <div>Set Alarm</div>
        <div class="form-actions">
          <form>
            <div class="alarm-inputs">
              <input class="alarm-input" type="number" name="hour" placeholder="Enter hours" min="0" max="12"
                required />
              <input class="alarm-input" type="number" name="min" min="0" max="60" placeholder="Enter minutes"
                required />
              <input class="alarm-input" type="number" name="sec" min="0" max="60" placeholder="Enter seconds"
                required />
              <select name="zone" required>
                <option value="" selected disabled>Zone</option>
                <option value="AM">AM</option>
                <option value="PM">PM</option>
              </select>
            </div>
            <button id="alarm-button">Submit</button>
          </form>
        </div>
      </div>
    </div>
    <div id="active-alarm">
      <div id="alarm-text"></div>
      <button id="clear-alarm">Clear Alarm</button>
    </div>
    <audio id="alarm-audio"></audio>



    <section class="xo-section">
      <h1 class="xo-title">X / O</h1>
      <div class="xo-container">
        <div data-cell-index="0" class="cell"></div>
        <div data-cell-index="1" class="cell"></div>
        <div data-cell-index="2" class="cell"></div>
        <div data-cell-index="3" class="cell"></div>
        <div data-cell-index="4" class="cell"></div>
        <div data-cell-index="5" class="cell"></div>
        <div data-cell-index="6" class="cell"></div>
        <div data-cell-index="7" class="cell"></div>
        <div data-cell-index="8" class="cell"></div>
      </div>
      <h2 class="xo-status"></h2>
      <button class="xo-restart">Restart Game</button>
    </section>





    <script>
      var alarmString = null;

      // Select HTML5 Audio element
      const alarmAudio = document.getElementById("alarm-audio");

      // Select DOM element with create-alarm id
      const createAlarm = document.querySelector(".create-alarm");

      // Select DOM element of active alarm container
      const activeAlarm = document.getElementById("active-alarm");
      const clearAlarm = document.getElementById("clear-alarm");

      // Select DOM element of active alarm text
      const alarmTextContainer = document.getElementById("alarm-text");

      const alarmText = (time) => `Alarm set at time ${time}`;

      // Initialize alarm sound
      alarmAudio.src = "http://soundbible.com/grab.php?id=1252&type=mp3";
      alarmAudio.load();

      // Handle Create Alarm submit
      const handleSubmit = (event) => {
        // Prevent default action of reloading the page
        event.preventDefault();
        const { hour, sec, min, zone } = document.forms[0];
        alarmString = getTimeString({
          hours: hour.value,
          seconds: sec.value,
          minutes: min.value,
          zone: zone.value
        });
        // Reset form after submit
        document.forms[0].reset();
        // Hide create alarm
        createAlarm.style.display = "none";
        // show active alarm with text
        activeAlarm.style.display = "block";
        alarmTextContainer.innerHTML = alarmText(alarmString);
      };

      const handleClear = () => {
        alarmString = "";
        activeAlarm.style.display = "none";
        createAlarm.style.display = "block";
      };

      // Trigger handleClear on button click
      clearAlarm.addEventListener("click", handleClear);
      // Attach submit event to the form
      document.forms[0].addEventListener("submit", handleSubmit);

      // Function to check if alarm needs to be triggered
      const checkAlarm = (timeString) => {
        if (alarmString === timeString) {
          alarmAudio.play();
        }
      };

      // Function to convert time to string value
      const getTimeString = ({ hours, minutes, seconds, zone }) => {
        if (minutes / 10 < 1) {
          minutes = "0" + minutes;
        }
        if (seconds / 10 < 1) {
          seconds = "0" + seconds;
        }
        return `${hours}:${minutes}:${seconds} ${zone}`;
      };

      // Function to display current time on screen
      const renderTime = () => {
        var currentTime = document.getElementById("current-time");
        const currentDate = new Date();
        var hours = currentDate.getHours();
        var minutes = currentDate.getMinutes();
        var seconds = currentDate.getSeconds();
        var zone = hours >= 12 ? "PM" : "AM";
        if (hours > 12) {
          hours = hours % 12;
        }
        const timeString = getTimeString({ hours, minutes, seconds, zone });
        checkAlarm(timeString);
        currentTime.innerHTML = timeString;
      };

      // Update time every second
      setInterval(renderTime, 1000);




      // xo 

      const statusDisplay = document.querySelector('.xo-status');

      let gameActive = true;
      let currentPlayer = "X";
      let gameState = ["", "", "", "", "", "", "", "", ""];

      const winningMessage = () => `Player ${currentPlayer} has won!`;
      const drawMessage = () => `Game ended in a draw!`;
      const currentPlayerTurn = () => `It's ${currentPlayer}'s turn`;

      statusDisplay.innerHTML = currentPlayerTurn();

      const winningConditions = [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        [0, 4, 8],
        [2, 4, 6]
      ];

      function handleCellPlayed(clickedCell, clickedCellIndex) {
        gameState[clickedCellIndex] = currentPlayer;
        clickedCell.innerHTML = currentPlayer;
      }

      function handlePlayerChange() {
        currentPlayer = currentPlayer === "X" ? "O" : "X";
        statusDisplay.innerHTML = currentPlayerTurn();
      }

      function handleResultValidation() {
        let roundWon = false;
        for (let i = 0; i <= 7; i++) {
          const winCondition = winningConditions[i];
          let a = gameState[winCondition[0]];
          let b = gameState[winCondition[1]];
          let c = gameState[winCondition[2]];
          if (a === '' || b === '' || c === '') {
            continue;
          }
          if (a === b && b === c) {
            roundWon = true;
            break
          }
        }

        if (roundWon) {
          statusDisplay.innerHTML = winningMessage();
          gameActive = false;
          return;
        }

        let roundDraw = !gameState.includes("");
        if (roundDraw) {
          statusDisplay.innerHTML = drawMessage();
          gameActive = false;
          return;
        }

        handlePlayerChange();
      }

      function handleCellClick(clickedCellEvent) {
        const clickedCell = clickedCellEvent.target;
        const clickedCellIndex = parseInt(clickedCell.getAttribute('data-cell-index'));

        if (gameState[clickedCellIndex] !== "" || !gameActive) {
          return;
        }

        handleCellPlayed(clickedCell, clickedCellIndex);
        handleResultValidation();
      }

      function handleRestartGame() {
        gameActive = true;
        currentPlayer = "X";
        gameState = ["", "", "", "", "", "", "", "", ""];
        statusDisplay.innerHTML = currentPlayerTurn();
        document.querySelectorAll('.cell').forEach(cell => cell.innerHTML = "");
      }


      document.querySelectorAll('.cell').forEach(cell => cell.addEventListener('click', handleCellClick));
      document.querySelector('.xo-restart').addEventListener('click', handleRestartGame);

    </script>




    <!-- footer -->
    <%- include(`./partials/footer`); %>

</html>